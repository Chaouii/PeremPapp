<?php

/**
 * ProductsController
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Products API
 *
 * This is Product API for product data management
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use Swagger\Server\Api\ProductsApiInterface;
use Swagger\Server\Model\ApplicationError;
use Swagger\Server\Model\Products;

/**
 * ProductsController Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsController extends Controller
{

    /**
     * Operation createProduct
     *
     * Create new Products and insert it in Products collection
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function createProductAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        $inputFormat = $request->headers->has('Content-Type')?$request->headers->get('Content-Type'):$consumes[0];
        if (!in_array($inputFormat, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $products = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $products = $this->deserialize($products, 'Swagger\Server\Model\Products', $inputFormat);

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("Swagger\Server\Model\Products");
        $response = $this->validate($products, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->createProduct($products, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns a userId(RH SSO) in url. If no email identified a 400 code is returned.';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 201:
                    $message = 'Returns a userId(RH SSO) in url. If no email identified a 400 code is returned.';
                    break;
                case 400:
                    $message = 'Bad request';
                    break;
                case 409:
                    $message = 'Conflict request';
                    break;
                case 500:
                    $message = 'Internal Server Error';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-Swagger-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation userProduct
     *
     * get the product of a user
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function userProductAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $userId = $request->query->get('userId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $userId = $this->deserialize($userId, 'string', 'string');

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($userId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->userProduct($userId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'A JSON object containing userId data';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'A JSON object containing userId data';
                    break;
                case 400:
                    $message = 'Bad request';
                    break;
                case 401:
                    $message = 'Unauthorized access';
                    break;
                case 403:
                    $message = 'Unauthorized access';
                    break;
                case 404:
                    $message = 'Not found';
                    break;
                case 500:
                    $message = 'Internal Server Error';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-Swagger-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return ProductsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('products');
    }
}
